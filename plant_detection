import tensorflow as tf
from tensorflow import keras
from tensorflow.keras.preprocessing.image import ImageDataGenerator
import matplotlib.pyplot as plt
import numpy as np
import os

# Set dataset path
DATASET_PATH = "/home/ajay/my projects /machin learning projects/"

# Image properties
IMG_HEIGHT = 150
IMG_WIDTH = 150
BATCH_SIZE = 32

# Data augmentation and loading
datagen = ImageDataGenerator(
    rescale=1./255,
    validation_split=0.2  # 80% training, 20% validation
)

train_generator = datagen.flow_from_directory(
    DATASET_PATH,
    target_size=(IMG_HEIGHT, IMG_WIDTH),
    batch_size=BATCH_SIZE,
    class_mode="categorical",
    subset="training"
)

valid_generator = datagen.flow_from_directory(
    DATASET_PATH,
    target_size=(IMG_HEIGHT, IMG_WIDTH),
    batch_size=BATCH_SIZE,
    class_mode="categorical",
    subset="validation"
)

# Get number of classes
num_classes = len(train_generator.class_indices)
print(f"Number of Classes: {num_classes}")

# CNN Model
model = keras.Sequential([
    keras.layers.Conv2D(32, (3, 3), activation='relu', input_shape=(IMG_HEIGHT, IMG_WIDTH, 3)),
    keras.layers.MaxPooling2D(2, 2),

    keras.layers.Conv2D(64, (3, 3), activation='relu'),
    keras.layers.MaxPooling2D(2, 2),

    keras.layers.Conv2D(128, (3, 3), activation='relu'),
    keras.layers.MaxPooling2D(2, 2),

    keras.layers.Flatten(),
    keras.layers.Dense(256, activation='relu'),
    keras.layers.Dropout(0.5),
    keras.layers.Dense(num_classes, activation='softmax')
])

# Compile Model
model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

# Train Model
epochs = 2  # Increase for better accuracy
history = model.fit(train_generator, validation_data=valid_generator, epochs=epochs)

# Save Model
model.save("/home/ajay/my projects /machin learning projects/plant_disease_dataset/plant_disease_model.h5")
print("âœ… Model saved successfully!")

# Plot Training Results
plt.plot(history.history['accuracy'], label='Train Accuracy')
plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.legend()
plt.title('Training vs Validation Accuracy')
plt.show()

# Function to Predict Disease Name
def predict_image(image_path):
    from tensorflow.keras.preprocessing import image

    # Load and preprocess image
    img = image.load_img(image_path, target_size=(IMG_HEIGHT, IMG_WIDTH))
    img_array = image.img_to_array(img) / 255.0
    img_array = np.expand_dims(img_array, axis=0)

    # Load trained model
    model = keras.models.load_model("/home/ajay/my projects /machin learning projects/plant_disease_dataset/plant_disease_model.h5")

    # Make prediction
    prediction = model.predict(img_array)
    class_index = np.argmax(prediction)
    confidence = np.max(prediction) * 100  # Convert to percentage

    # Get class labels from training data
    class_labels = list(train_generator.class_indices.keys())
    
    # Print result
    predicted_disease = class_labels[class_index]
    print(f"ðŸ“¸ Image: {image_path}")
    print(f"ðŸŒ¿ Predicted Disease: {predicted_disease}")
    print(f"ðŸ“Š Confidence: {confidence:.2f}%")

# Example Prediction (Change the path to any test image)
predict_image("/my projects /machin learning projects/plant_disease_dataset/test/TomatoYellowCurlVirus3.JPG")
